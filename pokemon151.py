# -*- coding: utf-8 -*-
"""Pokemon151.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wtCRq1mqCpvykEyVAtiKx--vug-X7iSA

## Imports
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
import platform
# from google.colab import drive
# from zipfile import ZipFile

"""## Import y carga del modelo"""

# drive.mount('/content/gdrive')
# with ZipFile("gdrive/MyDrive/Pokemones/Pokemon_Modelo.zip", 'r') as zip:
#    zip.extractall()

model = keras.models.load_model('Pokemon')

"""## Variables extras para el modelo"""

img_height = 512
img_width = 512
class_names = ['Abra', 'Aerodactyl', 'Alakazam', 'Arbok', 'Arcanine', 'Articuno',
               'Beedrill', 'Bellsprout', 'Blastoise', 'Bulbasaur', 'Butterfree',
               'Caterpie', 'Chansey', 'Charizard', 'Charmander', 'Charmeleon',
               'Clefable', 'Clefairy', 'Cloyster', 'Cubone', 'Dewgong', 'Diglett',
               'Ditto', 'Dodrio', 'Doduo', 'Dragonair', 'Dragonite', 'Dratini',
               'Drowzee', 'Dugtrio', 'Eevee', 'Ekans', 'Electabuzz', 'Electrode',
               'Exeggcute', 'Exeggutor', 'Farfetchd', 'Fearow', 'Flareon', 'Gastly',
               'Gengar', 'Geodude', 'Gloom', 'Golbat', 'Goldeen', 'Golduck', 'Golem',
               'Graveler', 'Grimer', 'Growlithe', 'Gyarados', 'Haunter', 'Hitmonchan',
               'Hitmonlee', 'Horsea', 'Hypno', 'Ivysaur', 'Jigglypuff', 'Jolteon',
               'Jynx', 'Kabuto', 'Kabutops', 'Kadabra', 'Kakuna', 'Kangaskhan',
               'Kingler', 'Koffing', 'Krabby', 'Lapras', 'Lickitung', 'Machamp',
               'Machoke', 'Machop', 'Magikarp', 'Magmar', 'Magnemite', 'Magneton',
               'Mankey', 'Marowak', 'Meowth', 'Metapod', 'Mew', 'Mewtwo', 'Moltres',
               'MrMime', 'Muk', 'Nidoking', 'Nidoqueen', 'Nidorina', 'Nidorino',
               'Ninetales', 'Oddish', 'Omanyte', 'Omastar', 'Onix', 'Paras',
               'Parasect', 'Persian', 'Pidgeot', 'Pidgeotto', 'Pidgey', 'Pikachu',
               'Pinsir', 'Poliwag', 'Poliwhirl', 'Poliwrath', 'Ponyta', 'Porygon',
               'Primeape', 'Psyduck', 'Raichu', 'Rapidash', 'Raticate', 'Rattata',
               'Rhydon', 'Rhyhorn', 'Sandshrew', 'Sandslash', 'Scyther', 'Seadra',
               'Seaking', 'Seel', 'Shellder', 'Slowbro', 'Slowpoke', 'Snorlax',
               'Spearow', 'Squirtle', 'Starmie', 'Staryu', 'Tangela', 'Tauros',
               'Tentacool', 'Tentacruel', 'Vaporeon', 'Venomoth', 'Venonat',
               'Venusaur', 'Victreebel', 'Vileplume', 'Voltorb', 'Vulpix', 'Wartortle',
               'Weedle', 'Weepinbell', 'Weezing', 'Wigglytuff', 'Zapdos', 'Zubat']

"""## SetUp de las pruebas"""
if platform.system() == "Darwin":
  toys_path = "toys/"
  sprites_path = "sprites/"
else:
  toys_path = "toys\\"
  sprites_path = "sprites\\"


dex = ['Bulbasaur', 'Ivysaur', 'Venusaur', 'Charmander', 'Charmeleon', 'Charizard',
       'Squirtle', 'Wartortle', 'Blastoise', 'Caterpie', 'Metapod', 'Butterfree',
       'Weedle', 'Kakuna', 'Beedrill', 'Pidgey', 'Pidgeotto', 'Pidgeot',
       'Rattata', 'Raticate', 'Spearow', 'Fearow', 'Ekans', 'Arbok',
       'Pikachu', 'Raichu', 'Sandshrew', 'Sandslash', 'Nidoran', 'Nidorina', 'Nidoqueen',
       'Nidoran', 'Nidorino', 'Nidoking', 'Clefairy', 'Clefable',
       'Vulpix', 'Ninetales', 'Jigglypuff', 'Wigglytuff', 'Zubat', 'Golbat',
       'Oddish', 'Gloom', 'Vileplume', 'Paras', 'Parasect',
       'Venonat', 'Venomoth','Diglett', 'Dugtrio', 'Meowth', 'Persian',
       'Psyduck', 'Golduck', 'Mankey', 'Primeape', 'Growlithe', 'Arcanine',
       'Poliwag', 'Poliwhirl', 'Poliwrath', 'Abra', 'Kadabra', 'Alakazam',
       'Machop', 'Machoke',  'Machamp', 'Bellsprout', 'Weepinbell', 'Victreebel',
       'Tentacool', 'Tentacruel', 'Geodude', 'Graveler', 'Golem',
       'Ponyta', 'Rapidash', 'Slowpoke', 'Slowbro', 'Magnemite', 'Magneton', 'Farfetchd',
       'Doduo', 'Dodrio', 'Seel', 'Dewgong', 'Grimer', 'Muk',
       'Shellder', 'Cloyster', 'Gastly', 'Haunter', 'Gengar', 'Onix',
       'Drowzee', 'Hypno', 'Krabby', 'Kingler', 'Voltorb', 'Electrode',
       'Exeggcute', 'Exeggutor', 'Cubone', 'Marowak', 'Hitmonlee', 'Hitmonchan',
       'Lickitung', 'Koffing', 'Weezing', 'Rhyhorn', 'Rhydon', 'Chansey',
       'Tangela', 'Kangaskhan', 'Horsea', 'Seadra', 'Goldeen', 'Seaking',
       'Staryu', 'Starmie', 'MrMime', 'Scyther', 'Jynx', 'Electabuzz',
       'Magmar', 'Pinsir', 'Tauros', 'Magikarp', 'Gyarados', 'Lapras',
       'Ditto', 'Eevee', 'Vaporeon', 'Jolteon', 'Flareon', 'Porygon',
       'Omanyte', 'Omastar', 'Kabuto', 'Kabutops', 'Aerodactyl', 'Snorlax',
       'Articuno', 'Zapdos', 'Moltres', 'Dratini', 'Dragonair', 'Dragonite',
       'Mewtwo', 'Mew']

toys_names = ['Charmander', 'Pikachu', 'Bulbasaur', 'Koffing']

right = 0
for i in range(151):
  if(i != 24 and i != 28 and i != 31):
    img = keras.preprocessing.image.load_img(sprites_path+str(i+1)+".png", target_size=(img_height, img_width))
    img_array = keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0) # Create a batch

    predictions = model.predict(img_array)
    score = tf.nn.softmax(predictions[0])
    if (i < len(dex) and class_names[np.argmax(score)] == dex[i]):
      right +=1
      print("✓ This image belongs to {}, had a {:.2f} percent confidence."
          .format(class_names[np.argmax(score)], 100 * np.max(score)))
    else:
      print("✗ This image didn't belong to {}, had a {:.2f} percent confidence."
          .format(class_names[np.argmax(score)], 100 * np.max(score)))
print("\nAccuracy: {:.2f}%".format(right/(len(class_names)-3)*100))

right = 0
for i in range(4):
  img = keras.preprocessing.image.load_img(toys_path+str(i+1)+".jpeg", target_size=(img_height, img_width))
  img_array = keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0) # Create a batch

  predictions = model.predict(img_array)
  score = tf.nn.softmax(predictions[0])
  if (i < len(dex) and class_names[np.argmax(score)] == toys_names[i]):
    right +=1
    print("✓ This image belongs to {}, had a {:.2f} percent confidence."
          .format(class_names[np.argmax(score)], 100 * np.max(score)))
  else:
    print("✗ This image didn't belong to {}, had a {:.2f} percent confidence."
          .format(class_names[np.argmax(score)], 100 * np.max(score)))
print("\nAccuracy: {:.2f}%".format(right/(len(toys_names))*100))
